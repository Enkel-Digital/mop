/**
 * Express Router for handling appointments
 * Mounted on /appointment
 * @author JJ
 * @module take routes
 */

const express = require("express");
const router = express.Router();
const sendMail = require("../utils/sendMail");
const fs = require("../utils/fs");
const { createAndInsertEvent } = require("../utils/GoogleCalendar");
const unixseconds = require("unixseconds");
const { asyncWrap } = require("express-error-middlewares");

// Checks if user already have an account, if true, return account ID,
// Else create a new account and return the ID
async function getUserAccountIdIfExists(phoneNumber) {
  const snapshot = await fs
    .collection("users")
    .where("number", "==", phoneNumber)
    .get();

  // If the snapshot is empty, return undefined to specify user does not have an account
  // Else assume only 1 document for that user, and return the document ID of the user document (the first one)
  if (snapshot.empty) return undefined;
  else return snapshot.docs[0].id;
}

// Creates a new user account and returns the user document ID
async function createUserAccount({ fname, lname, number, email }) {
  // Add first to get user document ID
  // The documents are not keyed using email as it can change, they are keyed using firestore autogenerated UID
  const { id } = await fs.collection("users").add({
    fname,
    lname,
    number,
    email,

    // Store time user account is created in unix seconds (this is the time of the server executing the code)
    createdAt: unixseconds(),
  });

  return id;
}

/**
 * Creates an account for the user if it does not already exists, and book a appointment
 * @name POST /appointment/book
 * @returns Sucess indicator
 */
router.post(
  "/book",
  express.json(),
  asyncWrap(async (req, res) => {
    const { dogID, time, fname, lname, email } = req.body;
    // Remove all white space from phone number
    const number = req.body.number.replace(" ", "");

    // Get the user ID either from an existing account, or from a newly created account
    const userID =
      (await getUserAccountIdIfExists(number)) ||
      (await createUserAccount({ fname, lname, number, email }));

    const { id: appointmentID } = await fs.collection("appointments").add({
      user: userID,

      dogID,
      time,
      fname,
      lname,
      number,
      email,

      // Store time appointment was created in unix seconds (this is the time of the server executing the code)
      createdAt: unixseconds(),
    });

    // Send user a email to confirm with them that their appointment has been scheduled successfully
    await sendMail.send({
      to: email,
      from: process.env.notificationEmailSender,
      subject: "Ministry Of Pup: Appointment Booked!",
      html:
        `Hi ${fname}!<br /><br />` +
        `You appointment has been scheduled successfully, see you on ${time}<br />`,
    });

    await createAndInsertEvent({
      appointmentID,
      userFname: fname,
      start: time,
    });

    res.status(200).json({ ok: true });
  })
);

module.exports = router;
